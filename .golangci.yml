version: "2"
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 5m
  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # Default: 0 (automatically set to match Linux container CPU quota and
  # fall back to the number of logical CPUs in the machine)
  concurrency: 4
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1
  # Include test files or not.
  # Default: true
  tests: true
linters:
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    - durationcheck
    - errchkjson
    - errorlint
    - exhaustive
    - gocheckcompilerdirectives
    - gochecksumtype
    - gosec
    - gosmopolitan
    - loggercheck
    - makezero
    - musttag
    - nilerr
    - nilnesserr
    - noctx
    - protogetter
    - reassign
    - recvcheck
    - rowserrcheck
    - spancheck
    - sqlclosecheck
    - testifylint
    - unparam
    - zerologlint
  disable:
    - prealloc
  settings:
    dogsled:
      # Checks assignments with too many blank identifiers.
      # Default: 2
      max-blank-identifiers: 2
    dupl:
      # Tokens count to trigger issue.
      # Default: 150
      threshold: 100
    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
      # Such cases aren't reported by default.
      # Default: false
      check-type-assertions: false
      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
      # Such cases aren't reported by default.
      # Default: false
      check-blank: false
    funlen:
      # Checks the number of lines in a function.
      # If lower than 0, disable the check.
      # Default: 60
      lines: 60
      # Checks the number of statements in a function.
      # If lower than 0, disable the check.
      # Default: 40
      statements: 40
    gocognit:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 20
    goconst:
      # Minimal length of string constant.
      # Default: 3
      min-len: 3
      # Minimum occurrences of constant string count to trigger issue.
      # Default: 3
      min-occurrences: 3
    gocritic:
      # Enable multiple checks by tags in addition to default checks.
      # Run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic` to see all tags and checks.
      # See https://github.com/go-critic/go-critic#usage -> section "Tags".
      # Default: []
      enabled-tags:
        - performance
      settings:
        captLocal:
          # Whether to restrict checker to params only.
          # Default: true
          paramsOnly: true
        rangeValCopy:
          # Size in bytes that makes the warning trigger.
          # Default: 128
          sizeThreshold: 32
    gocyclo:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 10
    gosec:
      # To specify a set of rules to explicitly exclude.
      # Available rules: https://github.com/securego/gosec#available-rules
      # Default: []
      excludes: []
        # - G107 # Url provided to HTTP request as taint input
        # - G404 # Insecure random number source (rand)
        # - G501 # Import blocklist: crypto/md5
    govet:
      enable:
        # Check for non-64-bits-aligned arguments to sync/atomic functions.
        - atomicalign
      disable:
        # Check for possible unintended shadowing of variables.
        - shadow
      enable-all: false
      disable-all: false

      # Settings per analyzer.
      settings:
        # Analyzer name, run `go tool vet help` to see all analyzers.
        printf:
          # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`).
          # Default: []
          funcs:
            - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Infof
            - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Warnf
            - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Errorf
            - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Fatalf
    lll:
      # Max line length, lines longer will be reported.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
      # Default: 120.
      line-length: 120
      # Tab width in spaces.
      # Default: 1
      tab-width: 1
    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      # Default is to use a neutral variety of English.
      locale: US
      # Typos to ignore.
      # Should be in lower case.
      ignore-rules:
        - aftership
        - automizely
    nakedret:
      # Make an issue if func has more lines of code than this setting, and it has naked returns.
      # Default: 30
      max-func-lines: 30
    prealloc:
      # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
      # Default: true
      simple: true
      # Report pre-allocation suggestions on range loops.
      # Default: true
      range-loops: true
      # Report pre-allocation suggestions on for loops.
      # Default: false
      for-loops: false
    staticcheck:
      # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
      # Example (to disable some checks): [ "all", "-SA1000", "-SA1001"]
      # Run `GL_DEBUG=staticcheck golangci-lint run --enable=staticcheck` to see all available checks and enabled by config checks.
      # Default: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
      checks:
        - all
        # - -SA1029
    whitespace:
      # Enforces newlines (or comments) after every multi-line if statement.
      # Default: false
      multi-if: false
      # Enforces newlines (or comments) after every multi-line function signature.
      # Default: false
      multi-func: false

  # Defines a set of rules to ignore issues.
  # It does not skip the analysis, and so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: strict
    generated: lax
    # Predefined exclusion rules.
    # Default: []
    presets:
      - comments
      - std-error-handling
      - common-false-positives
      - legacy

    # Excluding configuration per-path, per-linter, per-text and per-source.
    rules:
      # Exclude some linters from running on tests files.
      - path: _test\.go
        linters:
          - dupl
          - errcheck
          - gocyclo
          - gosec
      # Exclude `lll` issues for long lines with `go:generate`.
      - linters:
          - lll
        source: '^//go:generate '
    paths:
      - third_party$
      - builtin$
      - examples$
issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: true
formatters:
  # Enable specific formatter.
  # Default: [] (uses standard Go formatting)
  enable:
    - gofmt
    - goimports
  settings:
    gofmt:
      # Simplify code: gofmt with `-s` option.
      # Default: true
      simplify: true
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
